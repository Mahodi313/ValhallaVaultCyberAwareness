@page "/question/{SegmentId:int}"
@using ValhallaVaultCyberAwareness.DAL.DbModels
@using ValhallaVaultCyberAwareness.DAL.Repository
@inject IRepository<QuestionModel> questionRepository
@inject IRepository<AnswerModel> answerRepository
@inject IRepository<SubcategoryModel> subcategoryRepository
@rendermode InteractiveServer


<PageTitle>Quiz - Segment</PageTitle>

<div class="container bg-white text-dark rounded shadow-sm p-4 my-4">
    @if (!isLoaded)
    {
        <div class="text-center">
            <p><em>Laddar frågor...</em></p>
        </div>
    }
    else if (!showResults)
    {
        @if (subcategories != null && currentSubcategoryIndex < subcategories.Count)
        {
            <h2 class="text-center mb-3">@subcategories[currentSubcategoryIndex].Name</h2>
        }

        @if (questions != null && questions.Any())
        {
            <h4 class="text-center mb-4">@currentQuestion.Title</h4>
        }

        @if(answers != null)
        {
           
            @foreach (var answer in answers)
            {
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="answerGroup-@currentQuestion.Id"
                           value="@answer.Id"
                           checked="@(selectedAnswers.TryGetValue(currentQuestion.Id, out var selectedAnswerId) && selectedAnswerId == answer.Id)"
                           @onchange="@(() => SelectAnswer(answer))" />
                    <label class="form-check-label">@answer.Answer</label>
                </div>
            }
        }

        <div class="d-flex justify-content-between mt-4">
            @if (currentSubcategoryIndex > 0 || currentIndex > 0)
            {
                <button class="btn btn-outline-secondary" @onclick="@(async () => await PreviousQuestion())">Föregående</button>
            }
            else
            {
                <span></span> <!-- Placeholder for alignment -->
            }

            @if (currentIndex < (questions?.Count - 1) || currentSubcategoryIndex < (subcategories?.Count - 1))
            {
                <button class="btn btn-outline-primary" @onclick="@(async () => await NextQuestion())">Nästa</button>
            }
            else
            {
                <button class="btn btn-outline-success" @onclick="SubmitAnswers">Skicka in svaren</button>
            }
        </div>
    }
    else
    {
        @if (showResults)
        {
            foreach (var question in questions) // Loopa genom alla frågor
            {
                // Hitta det valda svaret för den aktuella frågan
                var selectedAnswer = answers.FirstOrDefault(a => selectedAnswers.TryGetValue(question.Id, out var selectedAnswerId) && a.Id == selectedAnswerId);

                // Kontrollera om svaret är korrekt
                var isCorrect = selectedAnswer != null && selectedAnswer.IsCorrectAnswer;

                <div>
                    <strong>@question.Title</strong>
                    @if (selectedAnswer != null)
                    {
                        <div>
                            Valda svar: @selectedAnswer.Answer
                            <span style="color: @(isCorrect ? "green" : "red")">@($"{(isCorrect ? "Rätt" : "Fel")}")</span>
                        </div>
                    }
                    else
                    {
                        <div>Inga svar valda</div>
                    }
                </div>
            }
        }
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-2" role="alert">
            @errorMessage
        </div>
    }
</div>

@code {
    [Parameter]
    public int SegmentId { get; set; }
    private int? selectedAnswerId { get; set; }
    private string errorMessage = "";
    private int currentSubcategoryIndex = 0;
    private List<SubcategoryModel>? subcategories;
    private Dictionary<int, int> selectedAnswers = new Dictionary<int, int>();
    private List<QuestionModel>? questions;
    private List<AnswerModel>? answers;
    private List<UserResponseModel> userResponses = new();
    private QuestionModel? currentQuestion;
    private AnswerModel? selectedAnswer;
    private bool isLoaded = false;
    private bool showResults = false;
    private int currentIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        // Hämta alla subkategorier för det angivna segmentet.
        subcategories = await subcategoryRepository.GetSubcategoriesBySegmentAsync(SegmentId);

        // Kontrollera om det finns några subkategorier. Om det finns, ladda frågorna för den första subkategorin.
        if (subcategories.Any())
        {
            currentSubcategoryIndex = 0; // Starta med den första subkategorin
            await LoadQuestionsForSubcategory(subcategories[currentSubcategoryIndex].Id);
            isLoaded = true; // Indikera att sidan har laddats och är redo att visas
        }
        else
        {
            // Hantera scenariot då inga subkategorier finns för det angivna segmentet
            // Detta kan innebära att visa ett meddelande till användaren eller navigera bort från sidan
            isLoaded = true;
        }
    }

    private async Task NextQuestion()
    {
        if (currentIndex < questions.Count - 1)
        {
            currentIndex++;
            currentQuestion = questions[currentIndex];
            selectedAnswerId = null; // Nollställ det valda svaret
            LoadAnswersForCurrentQuestion();
        }
        else if (currentSubcategoryIndex < subcategories.Count - 1)
        {
            currentSubcategoryIndex++;
            await LoadQuestionsForSubcategory(subcategories[currentSubcategoryIndex].Id); // Och här
        }
        else
        {
            showResults = true;
        }
    }

    private async Task PreviousQuestion()
    {
        if (currentIndex > 0)
        {
            currentIndex--;
            currentQuestion = questions[currentIndex];
            selectedAnswerId = null; // Nollställ det valda svaret
            LoadAnswersForCurrentQuestion();
        }
        else if (currentSubcategoryIndex > 0)
        {
            currentSubcategoryIndex--;
            await LoadQuestionsForSubcategory(subcategories[currentSubcategoryIndex].Id, loadLastQuestion: true); // Och här
        }
    }

    private async Task LoadQuestionsForSubcategory(int subcategoryId, bool loadLastQuestion = false)
    {
        try
        {
            // GetSubcategoriesBySegmentAsync()
            questions = await questionRepository.GetQuestionsBySubcategoryAsync(subcategoryId);
            if (questions.Any())
            {
                currentIndex = loadLastQuestion ? questions.Count - 1 : 0;
                currentQuestion = questions[currentIndex];
                await LoadAnswersForCurrentQuestion();
            }
            else
            {
                // Hantera när inga frågor finns
            }
        }
        catch (Exception ex)
        {

        }
    }

    private async Task LoadAnswersForCurrentQuestion()
    {
        if (currentQuestion != null)
        {
            answers = await answerRepository.GetByQuestionIdAsync(currentQuestion.Id);
            StateHasChanged(); // Dettauppdaterar UI med de nya svaren
        }
    }

    private void SelectAnswer(AnswerModel answer)
    {
        if (selectedAnswers.ContainsKey(currentQuestion.Id))
        {
            // Användaren har redan valt ett svar för den här frågan, uppdatera det befintliga svaret
            selectedAnswers[currentQuestion.Id] = answer.Id;
        }
        else
        {
            // Det är första gången användaren väljer ett svar för den här frågan, lägg till det nya svaret
            selectedAnswers.Add(currentQuestion.Id, answer.Id);
        }

        // Uppdatera även UserResponseModel om det behövs
        var existingResponse = userResponses.FirstOrDefault(r => r.QuestionId == currentQuestion.Id);
        if (existingResponse != null)
        {
            existingResponse.IsCorrect = answer.IsCorrectAnswer;
        }
        else
        {
            userResponses.Add(new UserResponseModel
                {
                    QuestionId = currentQuestion.Id,
                    IsCorrect = answer.IsCorrectAnswer
                });
        }
    }

    private void SubmitAnswers()
    {
        bool allQuestionsAnswered = questions.All(q => selectedAnswers.ContainsKey(q.Id));

        if (allQuestionsAnswered)
        {
            // Alla frågor har besvarats
            errorMessage = string.Empty;
            showResults = true;
        }
        else
        {
            // Inte alla frågor har besvarats
            errorMessage = "Vänligen svara på alla frågor innan du skickar in dina svar.";
        }

        StateHasChanged(); // Se till att komponenten uppdateras med det nya tillståndet.
    }
}
