@page "/Home"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using ValhallaVaultCyberAwareness.App.PageHandler
@using ValhallaVaultCyberAwareness.App.Services
@using ValhallaVaultCyberAwareness.DAL.DbModels
@using ValhallaVaultCyberAwareness.DAL.Repository
@attribute [Authorize]
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRepository<UserResponseModel> userRepo
@inject IRepository<CategoryModel> categoryRepo
@inject IAuthService authService
@inject IUserResponseService userResponseService
@rendermode InteractiveServer

<style>
    body {
        background-image: url(Gifs/stars3.gif);
        background-size: 100% auto;
        background-repeat: repeat-x;
        background-position: center;
        height: 100vh; 
        margin: 0; 
        padding: 0;
    }
</style>

<div class="container-fluid">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <span class="navbar-brand mb-0 h1 text-dark">Valhalla Home</span>
            <div class="navbar-nav ml-auto">
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <a class="btn btn-outline-dark me-2" href="/Admin">Admin Section</a>
                    </Authorized>
                </AuthorizeView>
                <a class="btn btn-outline-dark ms-2" href="/Userpage">Edit Account</a>
                <form class="d-inline-block" action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="btn btn-outline-dark ms-2">Log out</button>
                </form>
            </div>
        </div>
    </nav>

    <main class="container">
        <div class="search-container text-center my-4">
            <input class="form-control search-input" type="text" placeholder="Search categories..." @bind="searchTerm" @oninput="OnSearchInput" />
        </div>
        <div class="row justify-content-center">
            @foreach (var category in categories)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card category-card">
                        <div class="card-header bg-dark text-white">
                            <h2 class="card-title"><a href="/category/@category.Id" class="text-white">@category.Name</a></h2>
                         </div>
                        @if (category.Segments != null && category.Segments.Any())
                        {
                            <div class="card-body">
                                @foreach (var segment in category.Segments)
                                {
                                    int segmentCompletion = segmentCompletions.ContainsKey(segment.Id) ? segmentCompletions[segment.Id] : 0;
                                    <div class="segment-info mb-2">
                                        <p class="segment-name">@segment.Name</p>
                                        <div class="progress">
                                            <div class="progress-bar" role="progressbar" style="width: @segmentCompletion%" aria-valuenow="@segmentCompletion" aria-valuemin="0" aria-valuemax="100">@segmentCompletion%</div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        </div>
                 </div>
             }
        </div>
    </main>
</div>


@code {

    private List<CategoryModel> categories = new();
    private List<UserResponseModel> userResponses = new();
    private string searchTerm = "";
    private Dictionary<int, int> segmentCompletions = new Dictionary<int, int>();
    private string? currentUrl;
    private ClaimsPrincipal? currentUser;

    protected override async Task OnInitializedAsync()
    {
        categories = await LoadCategories();

        currentUser = await authService.GetCurrentUserDataAsync();

        if (currentUser.Identity.IsAuthenticated)
        {
            var userId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                userResponses = await userResponseService.GetUserResponsesAsync(userId);
                Console.WriteLine($"User responses count: {userResponses.Count}");
            }
        }

        await CalculateSegmentCompletions();
    }

    private async Task CalculateSegmentCompletions()
    {
        foreach (var category in categories)
        {
            foreach (var segment in category.Segments)
            {
                segmentCompletions[segment.Id] = await CalculateSegmentCompletion(segment);
            }
        }
    }

    // I took the already implemented logout function and added it here
    // because there was a problem with Blazor Server Side when accessing httpContext,
    // while using @rendermode InteractiveServer

    protected override void OnInitialized()
    {
        currentUrl = navigationManager.ToBaseRelativePath(navigationManager.Uri);
        navigationManager.LocationChanged += OnLocationChanged;

        PageHandler.CategoryId = null;
        PageHandler.SegmentId = null;
        PageHandler.SubcategoryId = null;
        PageHandler.SubcategoryIdHolder = null;
    }


    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = navigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private async Task<List<CategoryModel>> LoadCategories()
    {
        var loadedCategories = await categoryRepo.GetCategoryIncludeSegmentAsync();
        return loadedCategories;
    }

    private async Task<int> CalculateSegmentCompletion(SegmentModel segment)
    {
        int precentage = await userResponseService.CalculateSegmentCompletionBasedOnUser(segment, userResponses);

        return precentage;
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();

        if (!string.IsNullOrWhiteSpace(searchTerm.Trim()))
        {
            categories = categories
            .Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
        }
        else
        {
            categories = await LoadCategories();
        }

    }
}
