@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Security.Claims
@using ValhallaVaultCyberAwareness.App.Services
@using ValhallaVaultCyberAwareness.DAL.DbModels
@using ValhallaVaultCyberAwareness.DAL.Repository

@attribute [Authorize]

@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRepository<UserResponseModel> userRepo
@inject IRepository<CategoryModel> categoryRepo
@inject IAuthService authService
@inject IUserResponseService userResponseService
@rendermode InteractiveServer

@page "/Home"

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <span class="navbar-brand mb-0 ms-2 h1 text-primary">Valhalla Home</span>
    <div class="d-flex justify-content-end">
        <AuthorizeView Roles="Admin">
            <Authorized>
                <a class="btn btn-outline-primary me-2" href="/Admin">Go To Admin Section</a>
            </Authorized>
        </AuthorizeView>
        <a class="btn btn-outline-primary ms-2" href="/Userpage">Edit Account info</a>

        <form action="Account/Logout" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
            <button type="submit" class="btn btn-outline-primary ms-2">Log out</button>
        </form>
    </div>
</nav>
<br />
<main>
    <div class="search-container text-center">
        <input class="search-input" type="text" placeholder="Search for categories..." @bind="searchTerm" @oninput="OnSearchInput" />
    </div>
    <br />
    <div class="text-center">
        @foreach (var category in categories)
        {

            <div class="card category-card mb-3">
                <div class="card-header bg-primary text-white">
                    <a href="/category/@category.Id"><h2>@category.Name</h2></a>
                </div>
                @if (category.Segments != null && category.Segments.Any())
                {
                    <div class="card-body">

                        @foreach (var segment in category.Segments)
                        {
                            int segmentCompletion = CalculateSegmentCompletion(segment);
                            <div class="segment-info mb-2">
                                <p class="segment-name">@segment.Name</p>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: @segmentCompletion%" aria-valuenow="@segmentCompletion" aria-valuemin="0" aria-valuemax="100">@segmentCompletion%</div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
</main>

@code {

    private List<CategoryModel> categories = new();
    private List<UserResponseModel> userResponses = new();
    private string searchTerm = "";
    private string? currentUrl;
    private ClaimsPrincipal? currentUser;

    protected override async Task OnInitializedAsync()
    {
        categories = await LoadCategories();

        currentUser = await authService.GetCurrentUserDataAsync();

        if (currentUser.Identity.IsAuthenticated)
        {
            var userId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                userResponses = await userResponseService.GetUserResponsesAsync(userId);
            }
        }
    }

    // I took the already implemented logout function and added it here
    // because there was a problem with Blazor Server Side when accessing httpContext,
    // while using @rendermode InteractiveServer

    protected override void OnInitialized()
    {
        currentUrl = navigationManager.ToBaseRelativePath(navigationManager.Uri);
        navigationManager.LocationChanged += OnLocationChanged;
    }


    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = navigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private async Task<List<CategoryModel>> LoadCategories()
    {
        var loadedCategories = await categoryRepo.GetCategoryIncludeSegmentAsync();
        return loadedCategories;
    }

    private int CalculateSegmentCompletion(SegmentModel segment)
    {
        int precentage = userResponseService.CalculateSegmentCompletionBasedOnUser(segment, userResponses);

        return precentage;
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();

        if (!string.IsNullOrWhiteSpace(searchTerm.Trim()))
        {
            categories = categories
            .Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
        }
        else
        {
            categories = await LoadCategories();
        }

    }
}
