@page "/subcategory/{SegmentId:int}/{SubcategoryId:int}"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwareness.DAL.DbModels
@using ValhallaVaultCyberAwareness.DAL.Repository
@inject IRepository<SubcategoryModel> subcategoryRepository
@inject IRepository<SegmentModel> segmentRepository
@inject IRepository<CategoryModel> categoryRepository

@attribute [Authorize]

@if (category == null && segment == null)
{
    <PageTitle>Segment - Category</PageTitle>
}
else if ((category != null && segment != null) && subcategories != null && subcategory != null)
{
    <PageTitle>@segment.Name - @category.Name</PageTitle>

    <a href="/segment/@category.Id/@segment.Id" class="btn btn-primary">Return</a>

    <div class="valhalla-row">
        <div class="valhalla-div">
            <h1 class="valhalla-title">@subcategory.Name</h1>
            <h4>@category.Name - @segment.Name</h4>
            @* Här ska SubcategoryId vara första ID av subkategorin *@
            <a class="btn btn-primary valhalla-btn margin-top" href="/question/@SegmentId/@SubcategoryId">Start Quiz</a>
            <br />
            <label class="margin-top valhalla-title">Information om subkategorin:</label>
            <div class="col align-content-center valhalla-description-div">
                <p class="valhalla-description-subcategory">@subcategory.Info</p>
                <br />
            </div>
            <div class="d-flex justify-content-between mt-4">
                @if (currentSubcategoryIndex > 0)
                {
                    <a href="@GetPreviousSubcategoryUrl()" class="btn btn-secondary">Föregående</a>
                }
                else
                {
                    <span></span> <!-- Placeholder for alignment -->
                }
                <span></span> <!-- Placeholder for alignment -->
                @if (currentSubcategoryIndex < subcategories.Count - 1)
                {
                <a href="@GetNextSubcategoryUrl()" class="btn btn-primary">Nästa</a>
                }
                else
                {
                    <span></span> <!-- Placeholder for alignment when the button is not shown -->
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int SegmentId { get; set; }
    [Parameter]
    public int SubcategoryId { get; set; }

    private List<SubcategoryModel>? subcategories;
    private SubcategoryModel? subcategory;
    private SegmentModel? segment;
    private CategoryModel? category;
    private int currentSubcategoryIndex = 0;
    private int firstSubCategoryId;

    protected override async Task OnInitializedAsync()
    {
        subcategories = await subcategoryRepository.GetSubcategoriesBySegmentAsync(SegmentId);

        subcategory = await subcategoryRepository.GetByIdAsync(SubcategoryId);
        segment = await segmentRepository.GetByIdAsync(SegmentId);
        category = await categoryRepository.GetCategoryWithSegmentIdAsync(SegmentId);

        if (subcategories != null)
        {
            currentSubcategoryIndex = subcategories.FindIndex(sc => sc.Id == SubcategoryId);
            firstSubCategoryId = subcategories.First().Id;
        }

        StateHasChanged();
    }

    private string GetPreviousSubcategoryUrl()
    {
        var prevIndex = currentSubcategoryIndex - 1;
        if (prevIndex < 0)
        {
            prevIndex = subcategories.Count - 1;
        }
        return $"/subcategory/{SegmentId}/{subcategories[prevIndex].Id}";
    }

    private string GetNextSubcategoryUrl()
    {
        var nextIndex = currentSubcategoryIndex + 1;
        if (nextIndex >= subcategories.Count)
        {
            nextIndex = 0;
        }
        return $"/subcategory/{SegmentId}/{subcategories[nextIndex].Id}";
    }
}
