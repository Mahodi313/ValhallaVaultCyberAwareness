@page "/category/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc
@using System.Security.Claims
@using ValhallaVaultCyberAwareness.App.Services
@using ValhallaVaultCyberAwareness.DAL.DbModels
@using ValhallaVaultCyberAwareness.API
@using ValhallaVaultCyberAwareness.DAL.Repository
@using ValhallaVaultCyberAwareness.DAL.Uow
@using ValhallaVaultCyberAwareness.DAL.ViewModel

@* @attribute [Authorize]
 *@
@inject IViewModelService service
@inject IAuthService authService
@inject IUserResponseService userResponseService

@if(category == null)
{
<h2>Error.. Page not found</h2>
}


<div class="col categories mar">
    
    @if (category != null)
    {
        <div class="">
            <div class="category">
                <div class="cat-row ">
                    <h1 class="mar text-center">@category.Name</h1>
                    <p class="text-center " >@category.Info</p>
                </div>
                <hr />
            </div>
            

            <div class="cat-row category">


                <div class="cat-row">
                    <div>
                        <h2>@category.Name</h2>
                    </div>

                    @foreach (SegmentViewModel seg in segments)
                    {
                        int Comp = CalculateSegmentCompletion(seg);
                        @if(Comp == 100){ isDone = true; }

                        <div class="cat-row cat-card">
                            <div style="margin:20px;">
                                <strong>@Comp</strong>
                                <!--Visar en checkbox icon om segmentet är avklarat-->
                                @if(isDone)
                                {
                                    <img class="img-check mar" src="/Images/check.png" style="visibility: visible;" />
                                }
                                else
                                {
                                    <img class="img-check mar" src="/Images/check.png" style="visibility: hidden;" />
                                }

                                <a class="btn btn-light" href="@($"segment/{Id}/{seg.Id}")"><span style="font-size:x-large">@seg.Name</span></a>

                                <div class="cat-row category">
                                    <div class="d-flex flex-column ">
                                        @foreach (SubcategoryViewModel sub in subcategories.Where(su => su.SegmentId == seg.Id))
                                        {
                                            <div class="">@sub.Name</div>
                                        }
                                    </div>
                                </div>
                            </div>




                        </div>

                        <br />
                        <br />
                        <br />


                    }


                </div>

            </div>
        </div>
        
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }


    CategoryViewModel category { get; set; }
    List<SegmentViewModel> segments { get; set; }
    List<SubcategoryViewModel> subcategories { get; set; }
    private List<UserResponseModel> userResponses = new();
    private ClaimsPrincipal? currentUser;
    bool isDone { get; set; }


    protected override async Task OnInitializedAsync()
    {
        //Users = await userCont.GetAllUsersAsync();

        List<CategoryViewModel> categories = await service.GetAllCategoriesAndMeta();
        if (categories.Any())
        {
            category = (CategoryViewModel)categories.FirstOrDefault(c => c.Id == Id);
            segments = category.Segments.Where(s => s.CategoryId == category.Id).ToList();
            subcategories = category.Segments.SelectMany(s => s.Subcategories).ToList();

            //Medhis logik från Homepage
            currentUser = await authService.GetCurrentUserDataAsync();
            if (currentUser.Identity.IsAuthenticated)
            {
                var userId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (userId != null)
                {
                    userResponses = await userResponseService.GetUserResponsesAsync(userId);
                }
            }

        }
        


    }

    //Medhis logik från homepage
    private int CalculateSegmentCompletion(SegmentViewModel segment)
    {
        int precentage = userResponseService.CalculateSegmentCompletionBasedOnUser(segment, userResponses);

        return precentage;
    }

}
