@page "/category/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc
@using System.Security.Claims
@using ValhallaVaultCyberAwareness.App.Services
@using ValhallaVaultCyberAwareness.DAL.DbModels
@using ValhallaVaultCyberAwareness.API
@using ValhallaVaultCyberAwareness.DAL.Repository
@using ValhallaVaultCyberAwareness.DAL.Uow
@using ValhallaVaultCyberAwareness.DAL.ViewModel

@attribute [Authorize]

@inject IViewModelService service
@inject IAuthService authService
@inject IUserResponseService userResponseService

@if(category == null)
{
<h2>Error.. Page not found</h2>
}


<div class="col categories mar">
    
    @if (category != null)
    {
        <div class="">
            <div class="category">
                <div class="cat-row2 ">
                    <h1 class="mar text-center">@category.Name</h1>
                    <p class="" style="text-align:justify">@category.Info</p>
                </div>
                <hr />
            </div>
            

            <div class="cat-row category">


                <div class="cat-row">

                    @foreach (SegmentViewModel seg in segments)
                    {
                        int Comp = CalculateSegmentCompletion(seg);
                        @if(Comp == 100){ isDone = true; }

                        <div class="cat-card">
                            <div class="mar">
                                <div class="categories">

                                    <!--Visar en checkbox icon om segmentet är avklarat-->
                                    @if (isDone)
                                    {
                                        <img class="img-check mar" src="/Images/check.png" style="visibility: visible;" />
                                        
                                        <a class="btn btn-info text-white" href="@($"segment/{Id}/{seg.Id}")"><h3>@seg.Name</h3></a>
                                        

                                    }
                                    else if(isCleardBefore)
                                    {
                                        <a class="btn btn-info text-white" href="@($"segment/{Id}/{seg.Id}")"><h3>@seg.Name</h3></a>
                                    }

                                    else if(!isDone)
                                    {
                                        <!-- Makes first segment clickable -->
                                        @if (isFirst)
                                        {
                                            <a class="btn btn-info text-white " href="@($"segment/{Id}/{seg.Id}")"><h3>@seg.Name</h3></a>

                                        }
                                        else
                                        {
                                            <a class="btn btn-info text-white disabled-link" href="#"><h3>@seg.Name</h3></a>
                                            
                                        }
                                    }
                                    

                                </div>
                                <br />
                                    
                                <div class="cat-row category">
                                    <div class="d-flex flex-column ">
                                        <ol>
                                            
                                                @if(isDone)
                                                {
                                                    @foreach (SubcategoryViewModel sub in subcategories.Where(su => su.SegmentId == seg.Id))
                                                    {
                                                        <div class="text-center" style="margin:5px;">
                                                        <li><h5>@sub.Name</h5></li>
                                                        </div>
                                                    }

                                                    isCleardBefore = true;
                                                }

                                                else if (isCleardBefore)
                                                {
                                                    @foreach (SubcategoryViewModel sub in subcategories.Where(su => su.SegmentId == seg.Id))
                                                    {
                                                        <div class="text-center" style="margin:5px;">
                                                         <li><h5>@sub.Name</h5></li>
                                                        </div>
                                                    }

                                                    isCleardBefore = false;
                                                }

                                                else if(!isDone)
                                                {
                                                    @if (isFirst)
                                                    {
                                                        @foreach (SubcategoryViewModel sub in subcategories.Where(su => su.SegmentId == seg.Id))
                                                        {
                                                            <div class="text-center" style="margin:5px;">
                                                            <li><h5 class="">@sub.Name</h5></li>
                                                            </div>
                                                        }

                                                        isFirst = false;
                                                    }

                                                    else
                                                    {
                                                        @foreach (SubcategoryViewModel sub in subcategories.Where(su => su.SegmentId == seg.Id))
                                                        {
                                                            <div class="text-center text-op" style="margin:5px;">
                                                             <li><h5 class="">@sub.Name</h5></li>
                                                            </div>
                                                        }

                                                        isCleardBefore = false;
                                                    }

                                                }

                                        </ol>
                                        
                                    </div>
                                </div>
                            </div>




                        </div>

                        <br />
                        <br />
                        <br />


                    }


                </div>

            </div>
        </div>
        
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    bool isCleardBefore { get; set; }
    bool isFirst { get; set; } = true;
    CategoryViewModel category { get; set; }
    List<SegmentViewModel> segments { get; set; }
    List<SubcategoryViewModel> subcategories { get; set; }
    private List<UserResponseModel> userResponses = new();
    private ClaimsPrincipal? currentUser;
    bool isDone { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        //Users = await userCont.GetAllUsersAsync();

        List<CategoryViewModel> categories = await service.GetAllCategoriesAndMeta();
        if (categories.Any())
        {
            category = (CategoryViewModel)categories.FirstOrDefault(c => c.Id == Id);
            segments = category.Segments.Where(s => s.CategoryId == category.Id).ToList();
            subcategories = category.Segments.SelectMany(s => s.Subcategories).ToList();

            //Medhis logik från Homepage
            currentUser = await authService.GetCurrentUserDataAsync();
            if (currentUser.Identity.IsAuthenticated)
            {
                var userId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (userId != null)
                {
                    userResponses = await userResponseService.GetUserResponsesAsync(userId);
                }
            }

        }
        


    }

    //Medhis logik från homepage
    private int CalculateSegmentCompletion(SegmentViewModel segment)
    {
        int precentage = userResponseService.CalculateSegmentCompletionBasedOnUser(segment, userResponses);

        return precentage;
    }

}
