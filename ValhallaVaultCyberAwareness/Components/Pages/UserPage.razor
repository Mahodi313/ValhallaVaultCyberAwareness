@page "/Userpage"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using ValhallaVaultCyberAwareness.DAL.DbModels
@using ValhallaVaultCyberAwareness.DAL.ViewModel
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]
@rendermode InteractiveServer

<h3>User Page</h3>

@if (user.Identity.IsAuthenticated)
{
    <EditForm EditContext="EditContext" OnValidSubmit="@ConfirmUpdate">


        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <div class="form-group">
            <label>New Email</label>
            <InputText @oninput="OnInputChange" @bind-Value="userUpdateModel.NewEmail" class="form-control" />
        </div>
        <div class="form-group">
            <label>Current Password</label>
            <InputText @oninput="OnInputChange" @bind-Value="userUpdateModel.CurrentPassword" class="form-control" type="password" />
        </div>
        <div class="form-group">
            <label>New Password</label>
            <InputText @oninput="OnInputChange" @bind-Value="userUpdateModel.NewPassword" class="form-control" type="password" />
        </div>
        <div class="form-group">
            <label>Confirm New Password</label>
            <InputText @oninput="OnInputChange" @bind-Value="userUpdateModel.ConfirmPassword" class="form-control" type="password" />
        </div>
        <button type="submit" class="btn btn-primary" disabled="@IsUpdateButtonDisabled">Update Information</button>
        <button class="btn btn-secondary" @onclick="GoBackToHome">Go Back to Home</button>
    </EditForm>
}

@if (showConfirmation)
{
    <div class="confirmation-dialog">
        <p>Are you sure you want to update your email and password?</p>
        <button class="btn btn-success" @onclick="UpdateUser">Confirm</button>
        <button class="btn btn-danger" @onclick="() => showConfirmation = false">Cancel</button>
    </div>
}

@code {
    private UserUpdateViewModel userUpdateModel = new UserUpdateViewModel();
    private ClaimsPrincipal user;
    private bool showConfirmation = false;
    private EditContext EditContext;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(userUpdateModel);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.FindByIdAsync(user.FindFirstValue(ClaimTypes.NameIdentifier));
            userUpdateModel.NewEmail = currentUser?.Email;
        }
    }

    private bool IsUpdateButtonDisabled {
        get {

            var a = string.IsNullOrWhiteSpace(userUpdateModel.NewEmail);
            var b = string.IsNullOrWhiteSpace(userUpdateModel.CurrentPassword);
            var c = string.IsNullOrWhiteSpace(userUpdateModel.NewPassword);
            var d = string.IsNullOrWhiteSpace(userUpdateModel.ConfirmPassword);
            var e = userUpdateModel.NewPassword != userUpdateModel.ConfirmPassword;
            return a || b || c || d || e;
        }
    }

    private async Task<bool> IsCurrentPasswordValid()
    {
        var currentUser = await UserManager.GetUserAsync(user);
        return await UserManager.CheckPasswordAsync(currentUser, userUpdateModel.CurrentPassword);
    }

    private void OnInputChange()
    {
        errorMessage = "";
    }
    private void ConfirmUpdate()
    {
        if (IsUpdateButtonDisabled) return;
        showConfirmation = true;
    }

    private async Task UpdateUser()
    {
        bool error = false;
        if (!await IsCurrentPasswordValid())
        {
            error = true;
            if (IsUpdateButtonDisabled) return;
            showConfirmation = true;
        }

        var currentUser = await UserManager.FindByEmailAsync(userUpdateModel.NewEmail);
        if (currentUser != null)
        {
            var changeEmailResult = await UserManager.SetEmailAsync(currentUser, userUpdateModel.NewEmail);
            if (changeEmailResult.Succeeded && !string.IsNullOrWhiteSpace(userUpdateModel.NewPassword))
            {
                var changePasswordResult = await UserManager.ChangePasswordAsync(currentUser, userUpdateModel.CurrentPassword, userUpdateModel.NewPassword);
                if (!changePasswordResult.Succeeded)
                    error = true;
                else
                {
                    NavigationManager.NavigateTo("/user-updated"); // Redirect to a confirmation page
                }
            }
            else
                error = true;

           
        }
        if(error)
            errorMessage = "Something went wrong. Please chekc if everything is filled in correctly";

        showConfirmation = false;
    }

    private void GoBackToHome()
    {
        NavigationManager.NavigateTo("/Home"); // Navigates to the home page
    }
}