@page "/1question/{SegmentId:int}/{SubcategoryId:int}"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwareness.DAL.DbModels
@using ValhallaVaultCyberAwareness.DAL.Repository
@inject IRepository<QuestionModel> questionRepository
@inject IRepository<AnswerModel> answerRepository
@inject IRepository<SubcategoryModel> subcategoryRepository
@inject IRepository<SegmentModel> segmentRepository
@rendermode InteractiveServer

@attribute [Authorize]

@if (segment != null)
{
    <PageTitle>Quiz - @segment.Name</PageTitle>
}
else
{
    <PageTitle>Quiz</PageTitle>
}

<a href="/subcategory/@SegmentId/@SubcategoryId" class="btn btn-primary">Return</a>

<div class="container bg-white text-dark rounded shadow-sm p-4 my-4">
    @if (!isLoaded)
    {
        <div class="text-center">
            <p><em>Laddar frågor...</em></p>
        </div>
    }
    else if (!showResults) // Här kanske man ska ha en hasSubmittedAnswer
    {
        @if (subcategories != null && currentSubcategoryIndex < subcategories.Count)
        {
            <h2 class="text-center mb-3">@subcategories[currentSubcategoryIndex].Name</h2>
        }

        @if (questions != null && questions.Any()) // Questions kommer alltid att vara 1 FYI
        {
            <h4 class="text-center mb-4">@currentQuestion.Title</h4>
        }

        @if (answers != null)
        {

            @foreach (var answer in answers)
            {
                <div class="form-check">
                    <input class="form-check-input" id="answer-@answer.Id" type="radio" name="answerGroup-@currentQuestion.Id"
                           value="@answer.Id"
                           checked="@(selectedAnswers.TryGetValue(currentQuestion.Id, out var selectedAnswerId) 
                            && selectedAnswerId == answer.Id)"
                           @onclick="@(() => SelectAnswer(answer))" />
                    <label class="form-check-label" for="answer-@answer.Id">@answer.Answer</label>
                    @* <label class="form-check-label">@answer.Answer</label> *@
                </div>
            }
        }

        @*Implementera logik - Tankar:
            - Det ska finnas en knapp på sidan där det står "Skicka in svaren" istället för "Nästa"
            - När man har tryckt på knappen ska det rätta svarets "Name" markeras med grönt.
            - Har man svarat fel på en fråga ska texten markeras med rött. 

            - Förklaringen på svaret man kryssat i ska dyka upp, då förklaringarna kan komma att skiljas åt.
            
            - Efter att man skickat in svaret ska då knappen "Nästa" dyka upp.

            - När man är på sista frågan ska man istället få knappen "Visa resultat"
            - Det är då man får se vad man svarat på alla frågorna.
        *@

        <div class="d-flex justify-content-between mt-4">
@*             <button class="btn btn-outline-secondary"
                    @onclick="@(async () => await PreviousQuestion())"
                    disabled="@(currentIndex <= 0 && currentSubcategoryIndex <= 0)">
                Föregående
            </button> *@

            @* @if (currentIndex < (questions?.Count - 1) || currentSubcategoryIndex < (subcategories?.Count - 1))
            {
                <button class="btn btn-outline-primary" @onclick="@(async () => await NextQuestion())">Skicka in svar</button>
            }
            else
            {
                <button class="btn btn-outline-success" @onclick="SubmitAnswers">Skicka in svaren</button>
            } *@


            @if (currentSubcategoryIndex > 0 || currentIndex > 0)
            {
                <button class="btn btn-outline-secondary" @onclick="@(async () => await PreviousQuestion())">Föregående</button>
            }
            else
            {
                <span></span> <!-- Placeholder for alignment -->
            }

            @if (currentIndex < (questions?.Count - 1) || currentSubcategoryIndex < (subcategories?.Count - 1))
            {
                <button class="btn btn-outline-primary" @onclick="@(async () => await NextQuestion())">Skicka in svaret</button>
            }
            else
            {
                <button class="btn btn-outline-success" @onclick="SubmitAnswers">Skicka in svaren</button>
            }
        </div>
    }
    else
    {
        @if (showResults)
        {
            <div class="container bg-white text-dark rounded shadow-sm p-4 my-4 position-relative">
                <div class="position-absolute top-0 end-0 p-1">
                    @if (isPassed)
                    {
                        <div class="alert alert-success" role="alert">
                            Godkänt - @percentageCorrect% klarat
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger" role="alert">
                            Underkänt - @percentageCorrect% klarat
                        </div>
                    }
                </div>

                @foreach (var subcategory in subcategories) // Loopa genom alla subkategorier
                {
                    <h2>@subcategory.Name</h2>
                    // Subkategoriens namn som rubrik

                    foreach (var question in subcategory.Questions) // Loopa genom alla frågor inom subkategorin
                    {
                        <div>
                            <strong>@question.Title</strong>

                            @foreach (var answer in question.Answers) // Visa alla svarsalternativ
                            {
                                string labelStyle = IsUserSelectedAnswer(question, answer) ?
                                (answer.IsCorrectAnswer ? "color: green;" : "color: red;") :
                                (answer.IsCorrectAnswer ? "color: green;" : "");

                                <div>
                                    @if (IsUserSelectedAnswer(question, answer))
                                    {
                                        <input type="radio" id="@answer.Id"
                                               name="@("answerGroup" + question.Id)"
                                               value="@answer.Id"
                                               checked="checked"
                                               disabled />
                                    }
                                    else
                                    {
                                        <input type="radio" id="@answer.Id"
                                               name="@("answerGroup" + question.Id)"
                                               value="@answer.Id"
                                               disabled />
                                    }

                                    <label for="@answer.Id" style="@labelStyle">@answer.Answer</label>
                                </div>
                            }
                        </div>
                    }
                }
                <div class="position-absolute bottom-0 end-0 p-1">
                    <a class="btn btn-primary" href="/subcategory/@SegmentId">Tillbaka</a>
                </div>
            </div>
        }
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-2" role="alert">
            @errorMessage
        </div>
    }
</div>

@code {
    [Parameter]
    public int SegmentId { get; set; }
    [Parameter]
    public int SubcategoryId { get; set; }



    private int? selectedAnswerId { get; set; }

    private int percentageCorrect;
    private bool isPassed = false;
    private SegmentModel? segment;
    private SubcategoryModel? subcategory;
    private string? category;
    private List<SubcategoryModel>? subcategories;
    private List<QuestionModel>? questions;
    private List<AnswerModel>? answers;
    private List<UserResponseModel> userResponses = new();
    private Dictionary<int, int> selectedAnswers = new Dictionary<int, int>();
    private QuestionModel? currentQuestion;
    private AnswerModel? selectedAnswer;
    private int currentSubcategoryIndex = 0;
    private int currentIndex = 0;
    private bool isLoaded = false;
    private bool showResults = false;
    private string errorMessage = "";
    private bool hasSubmittedAnswers = false;

    protected override async Task OnInitializedAsync()
    {
        // Hämta alla subkategorier för det angivna segmentet.
        subcategories = await subcategoryRepository.GetSubcategoriesBySegmentAsync(SegmentId);
        segment = await segmentRepository.GetByIdAsync(SegmentId);
        subcategory = await subcategoryRepository.GetByIdAsync(SubcategoryId);

        // Kontrollera om det finns några subkategorier. Om det finns, ladda frågorna för den första subkategorin.
        if (subcategories.Any())
        {
            currentSubcategoryIndex = 0; // Starta med den första subkategorin
            await LoadQuestionsForSubcategory(subcategories[currentSubcategoryIndex].Id);
            isLoaded = true; // Indikera att sidan har laddats och är redo att visas
        }
        else
        {
            isLoaded = true;
        }
    }

    private bool IsUserSelectedAnswer(QuestionModel question, AnswerModel answer)
    {
        bool tryGetValueResult = selectedAnswers.TryGetValue(question.Id, out var userSelectedAnswerId);
        bool isAnswerIdMatching = answer.Id == userSelectedAnswerId;
        bool isUserSelectedAnswer = tryGetValueResult && isAnswerIdMatching;
        return isUserSelectedAnswer;
    }

    private async Task NextQuestion()
    {
        if (currentIndex < subcategories.Count - 1)
        {
            if(hasSubmittedAnswers)
            {
                // Jämföra det valda svaret med det rätta
                // Disabla radioknapparna
                // Markera fel svar med rött

                currentIndex++;
                currentQuestion = questions[currentIndex];
                selectedAnswerId = null; // Nollställ det valda svaret

                await LoadAnswersForCurrentQuestion();
            }
            else // Har inte valt något svar ännu
            {
                errorMessage = "Välj ett svar först";
            }

        }
        else if (currentSubcategoryIndex < subcategories.Count - 1)
        {
            currentSubcategoryIndex++;
            await LoadQuestionsForSubcategory(subcategories[currentSubcategoryIndex].Id); // Och här
        }
        else
        {
            showResults = true;
        }
    }

    private async Task PreviousQuestion()
    {
        if (currentIndex > 0)
        {
            currentIndex--;
            currentQuestion = questions[currentIndex];
            selectedAnswerId = null; // Nollställ det valda svaret
            LoadAnswersForCurrentQuestion();
        }
        else if (currentSubcategoryIndex > 0)
        {
            currentSubcategoryIndex--;
            await LoadQuestionsForSubcategory(subcategories[currentSubcategoryIndex].Id, loadLastQuestion: true); // Och här
        }
    }

    private async Task LoadQuestionsForSubcategory(int subcategoryId, bool loadLastQuestion = false)
    {
        try
        {
            questions = await questionRepository.GetQuestionsBySubcategoryAsync(subcategoryId);
            if (questions.Any())
            {
                currentIndex = loadLastQuestion ? questions.Count - 1 : 0;
                currentQuestion = questions[currentIndex];
                await LoadAnswersForCurrentQuestion();
            }
            else
            {
                // Hantera när inga frågor finns
            }
        }
        catch (Exception ex)
        {
        }
    }

    private async Task LoadAnswersForCurrentQuestion()
    {
        if (currentQuestion != null)
        {
            answers = await answerRepository.GetAnswersByQuestionIdAsync(currentQuestion.Id);
            StateHasChanged(); // Dettauppdaterar UI med de nya svaren
        }
    }

    private void SelectAnswer(AnswerModel answer)
    {
        hasSubmittedAnswers = true;

        if (selectedAnswers.ContainsKey(currentQuestion.Id))
        {
            // Användaren har redan valt ett svar för den här frågan, uppdatera det befintliga svaret
            selectedAnswers[currentQuestion.Id] = answer.Id;
        }
        else
        {
            // Det är första gången användaren väljer ett svar för den här frågan, lägg till det nya svaret
            selectedAnswers.Add(currentQuestion.Id, answer.Id);
        }

        // Uppdatera även UserResponseModel om det behövs
        var existingResponse = userResponses.FirstOrDefault(r => r.QuestionId == currentQuestion.Id);
        if (existingResponse != null)
        {
            existingResponse.IsCorrect = answer.IsCorrectAnswer;
        }
        else
        {
            userResponses.Add(new UserResponseModel
                {
                    QuestionId = currentQuestion.Id,
                    IsCorrect = answer.IsCorrectAnswer
                });
        }
    }

    private void SubmitAnswers()
    {
        bool allQuestionsAnswered = questions.All(q => selectedAnswers.ContainsKey(q.Id));

        if (allQuestionsAnswered)
        {
            // Räkna antalet korrekta svar.
            int totalQuestions = 0;
            int correctAnswersCount = 0;

            // Iterera över varje subkategori
            foreach (var subcategory in subcategories)
            {
                // Anta att varje subkategori innehåller en lista med frågor
                foreach (var question in subcategory.Questions)
                {
                    totalQuestions++;

                    // Kontrollera om det valda svaret för frågan är korrekt
                    if (selectedAnswers.TryGetValue(question.Id, out var selectedAnswerId))
                    {
                        var correctAnswer = question.Answers.FirstOrDefault(a => a.IsCorrectAnswer);
                        if (correctAnswer != null && correctAnswer.Id == selectedAnswerId)
                        {
                            correctAnswersCount++;
                        }
                    }
                }
            }

            // Beräkna procentandelen av korrekta svar.
            percentageCorrect = totalQuestions > 0 ? (int)(((double)correctAnswersCount / totalQuestions) * 100) : 0;

            isPassed = percentageCorrect >= 80;

            // Alla frågor har besvarats
            errorMessage = string.Empty;
            showResults = true;
            hasSubmittedAnswers = true;
        }
        else
        {
            // Inte alla frågor har besvarats
            errorMessage = "Vänligen svara på alla frågor innan du skickar in dina svar.";
        }

        StateHasChanged(); // Se till att komponenten uppdateras med det nya tillståndet.
    }
}
