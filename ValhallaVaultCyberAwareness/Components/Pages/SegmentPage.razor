@page "/segment/{CatId:int}/{SegId:int}"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwareness.App.Services
@using ValhallaVaultCyberAwareness.DAL.DbModels
@using ValhallaVaultCyberAwareness.DAL.ViewModel

@attribute [Authorize]

@inject IViewModelService service
@inject IUserResponseService userResponseService


    @if (segment == null)
    {
        <h2>Error.. Page not found</h2>
    }


<br />
<br />

@if(segment != null)
{
    <div class="categories2">
        <div class="mar">

            <div class="row category">
                <h1 class="text-center">@category.Name</h1>
            </div>
            
            <div class="row cat-card ">
                <div class="col-5">

                    <h2 class="text-center">@segment.Name</h2>
                    <hr />
                    <p class="" style="text-align:justify">@segment.Info</p>

                    <hr />

                   

                </div>
                <div class="col-7 d-flex flex-column justify-content-around">

                    @foreach (SubcategoryViewModel sub in subcategories.Where(su => su.SegmentId == SegId))
                    {
                        <div class="row mar">
                            <a class="btn btn-light" href="@($"subcategory/{SegId}/{sub.Id}")"><h5 style="" >@sub.Name</h5></a>
                        </div>
                    }



                </div>
            </div>
        </div>
        



    </div>
    <br />
    <br />
}


<!-- Information about the segment -->

<!-- View of the subcategories included in the segment -->

<!-- Beeing able to choose a subcategory -->

<!-- Study material about the segment -->


@code {
    [Parameter]
    public int CatId { get; set; }
    [Parameter]
    public int SegId { get; set; }

    CategoryViewModel? category { get; set; }
    SegmentViewModel? segment { get; set; }
    List<SubcategoryViewModel>? subcategories { get; set; }
    private List<UserResponseModel> userResponses = new();
    private ClaimsPrincipal? currentUser;
    bool isDone { get; set; }


    protected override async Task OnInitializedAsync()
    {

        List<CategoryViewModel> categories = await service.GetAllCategoriesAndMeta();
        if (categories.Any())
        {
            category = (CategoryViewModel?)categories.FirstOrDefault(c => c.Id == CatId);
            segment = (SegmentViewModel?)category.Segments.FirstOrDefault(s => s.Id == SegId);
            subcategories = category.Segments.SelectMany(s => s.Subcategories).ToList();

        }



    }
}
