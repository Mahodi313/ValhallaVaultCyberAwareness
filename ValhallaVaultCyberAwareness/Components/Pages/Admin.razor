@page "/Admin"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwareness.App.Services
@using ValhallaVaultCyberAwareness.DAL.Repository
@using ValhallaVaultCyberAwareness.DAL.Uow
@using ValhallaVaultCyberAwareness.DAL.DbModels
@inject IUow UnitOfWork
@attribute [Authorize]
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]
@inject IAdminService adminService


<h3>Kategorihantering</h3>

@if (categories == null)
{
    <p>Laddar kategorier...</p>
}
else
{
    <table class="table text-light">
        <thead>
            <tr>
                <th>Kategorinamn</th>
                <th>Åtgärden</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td class="text-light">@category.Name</td>
                    <td>
                        <button @onclick="() => ConfirmEditCategory(category)">Ändra</button>
                        <button @onclick="() => ConfirmDeleteCategory(category.Id)">Ta bort</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="ShowAddCategoryForm">Skapa nytt kategori</button>

    @if (showAddForm)
    {
        <EditForm Model="newCategory" OnValidSubmit="SubmitAddCategory">
            <InputText @bind-Value="newCategory.Name" />
            <button type="submit">Lägg till kategori</button>
        </EditForm>
    }

    @if (showEditForm)
    {
        <EditForm Model="selectedCategory" OnValidSubmit="SubmitEditCategory">
            <InputText @bind-Value="selectedCategory.Name" />
            <button type="submit">Updatera kategori</button>
        </EditForm>
    }

    @if (showConfirmDelete)
    {
        <p>Är du säker att du vill ta bort denna kategori?</p>
        <button @onclick="() => DeleteCategory(deleteCategoryId)">Bekräfta borttagning</button>
        <button @onclick="() => showConfirmDelete = false">Avbryt</button>
    }
}
<h4>Segmenthantering</h4>
@if (segments == null)
{
    <p>Laddar segment...</p>
}
else
{
        <table class="table text-light">
        <thead>
            <tr>
                <th>Segmentnamn</th>
                <th>Associerat kategori ID</th>
                <th>Åtgärden</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var segment in segments)
            {
                <tr>
                    <td>@segment.Name</td>
                    <td>@segment.CategoryId</td>
                    <td>
                        <button @onclick="() => EditSegment(segment)">Ändra</button>
                        <button @onclick="() => ConfirmDeleteSegment(segment.Id)">Ta bort</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="ShowAddSegmentForm">Skapa nytt segment</button>
}

@if (showAddSegmentForm)
{
    <EditForm Model="newSegment" OnValidSubmit="SubmitAddSegment">
        <InputText @bind-Value="newSegment.Name" />
        <InputNumber @bind-Value="newSegment.CategoryId" />
        <button type="submit">Lägg till segment</button>
    </EditForm>
}

@if (showEditSegmentForm)
{
    <EditForm Model="selectedSegment" OnValidSubmit="SubmitEditSegment">
        <InputText @bind-Value="selectedSegment.Name" />
        <InputNumber @bind-Value="selectedSegment.CategoryId" />
        <button type="submit">Uppdatera segment</button>
    </EditForm>
}

@if (showConfirmDeleteSegment)
{
    <p>Är du säker att du vill ta bort segmentet?</p>
    <button @onclick="() => DeleteSegment(deleteSegmentId)">Bekräfta borttagning</button>
    <button @onclick="() => showConfirmDeleteSegment = false">Avbryt</button>
}

<h4>Subkategorihantering</h4>
@if (subcategories == null)
{
    <p>Laddar subkategorier...</p>
}
else
{
        <table class="table text-light">
        <thead>
            <tr>
                <th>Subkategorinamn</th>
                <th>Associerat segment ID</th>
                <th>Åtgärden</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var subcategory in subcategories)
            {
                <tr>
                    <td>@subcategory.Name</td>
                    <td>@subcategory.SegmentId</td>
                    <td>
                        <button @onclick="() => EditSubcategory(subcategory)">Ändra</button>
                        <button @onclick="() => ConfirmDeleteSubcategory(subcategory.Id)">Ta bort</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="ShowAddSubcategoryForm">Skapa ny subkategori</button>
}

@if (showAddSubcategoryForm)
{
    <EditForm Model="newSubcategory" OnValidSubmit="SubmitAddSubcategory">
        <InputText @bind-Value="newSubcategory.Name" />
        <InputNumber @bind-Value="newSubcategory.SegmentId" />
        <button type="submit">Lägg till subkategori</button>
    </EditForm>
}

@if (showEditSubcategoryForm)
{
    <EditForm Model="selectedSubcategory" OnValidSubmit="SubmitEditSubcategory">
        <InputText @bind-Value="selectedSubcategory.Name" />
        <InputNumber @bind-Value="selectedSubcategory.SegmentId" />
        <button type="submit">Uppdatera subkategori</button>
    </EditForm>
}

@if (showConfirmDeleteSubcategory)
{
    <p>Är du säker att du vill ta bort subkategorin?</p>
    <button @onclick="() => DeleteSubcategory(deleteSubcategoryId)">Bekräfta borttagning</button>
    <button @onclick="() => showConfirmDeleteSubcategory = false">Avbryt</button>
}
<h4>Frågehantering</h4>
@if (questions == null)
{
    <p>Laddar frågor...</p>
}
else
{
        <table class="table text-light">
        <thead>
            <tr>
                <th>Frågans titel</th>
                <th>Associerat subkategori ID</th>
                <th>Åtgärden</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var question in questions)
            {
                <tr>
                    <td>@question.Title</td>
                    <td>@question.SubcategoryId</td>
                    <td>
                        <button @onclick="() => EditQuestion(question)">Ändra</button>
                        <button @onclick="() => ConfirmDeleteQuestion(question.Id)">Ta bort</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="TriggerShowAddQuestionForm">Skapa ny fråga</button>
}
@if (showAddQuestionForm)
{
    <EditForm Model="newQuestion" OnValidSubmit="SubmitAddQuestion">
        <InputText @bind-Value="newQuestion.Title" />

        <label for="subcategoryId">Subkategori ID:</label>
        <select @bind="newQuestion.SubcategoryId">
            @foreach (var subcategory in subcategories)
            {
                <option value="@subcategory.Id">@subcategory.Name</option>
            }
        </select>

        @foreach (var answer in newQuestion.Answers)
        {
            <div>
                <InputText @bind-Value="answer.Answer" />
                <InputCheckbox @bind-Value="answer.IsCorrectAnswer" />
                <label>Rätt svar</label>
            </div>
        }

        <button type="button" @onclick="SubmitAddQuestion">Lägg till fråga</button>
    </EditForm>
    <button type="button" @onclick="AddAnswerAsync">Lägg till svar</button>
}

@if (showEditQuestionForm)
{
    <EditForm Model="selectedQuestion" OnValidSubmit="SubmitEditQuestion">
        <InputText @bind-Value="selectedQuestion.Title" />
        <InputNumber @bind-Value="selectedQuestion.SubcategoryId" />
        <button type="submit">Uppdatera fråga</button>
    </EditForm>
}

@if (showConfirmDeleteQuestion)
{
    <p>Är du säker att du vill ta bort frågan?</p>
    <button @onclick="() => DeleteQuestion(deleteQuestionId)">Bekräfta borttagning</button>
    <button @onclick="() => showConfirmDeleteQuestion = false">Avbryt</button>
}

@code {
  
    private IEnumerable<AnswerModel> answers; 

    private IEnumerable<CategoryModel> categories;
    private CategoryModel newCategory = new CategoryModel();
    private CategoryModel selectedCategory = new CategoryModel();
    private bool showAddForm = false;
    private bool showEditForm = false;
    private bool showConfirmDelete = false;
    private int deleteCategoryId;
    // Segment Variables
    private IEnumerable<SegmentModel> segments;
    private SegmentModel newSegment = new SegmentModel();
    private SegmentModel selectedSegment = new SegmentModel();
    private bool showAddSegmentForm = false;
    private bool showEditSegmentForm = false;
    private bool showConfirmDeleteSegment = false;
    private int deleteSegmentId;
    

    // Subsegment Variables
    private IEnumerable<SubcategoryModel> subcategories;
    private SubcategoryModel newSubcategory = new SubcategoryModel();
    private SubcategoryModel selectedSubcategory = new SubcategoryModel();
    private bool showAddSubcategoryForm = false;
    private bool showEditSubcategoryForm = false;
    private bool showConfirmDeleteSubcategory = false;
    private int deleteSubcategoryId;
    

    // Question Variables
    private IEnumerable<QuestionModel> questions;
    private QuestionModel newQuestion = new QuestionModel();
    private QuestionModel selectedQuestion = new QuestionModel();
    private bool showAddQuestionForm = false;
    private bool showEditQuestionForm = false;
    private bool showConfirmDeleteQuestion = false;
    private int deleteQuestionId;

    protected override async Task OnInitializedAsync()
    {
        categories = await adminService.GetAllCategoriesAsync();
        segments = await adminService.GetAllSegmentsAsync();
        subcategories = await adminService.GetAllSubcategoriesAsync();
        questions = await adminService.GetAllQuestionsAsync();
    }

    //CATEGORY
    private async Task SubmitAddCategory()
    {
        await adminService.AddCategoryAsync(newCategory);
        categories = await adminService.GetAllCategoriesAsync();
        showAddForm = false;
    }
    private async Task SubmitEditCategory()
    {
        await adminService.UpdateCategoryAsync(selectedCategory);
        categories = await adminService.GetAllCategoriesAsync();
        showEditForm = false;
    }
    private void ConfirmEditCategory(CategoryModel category)
    {
        selectedCategory = category;
        showEditForm = true;
    }
    private async Task DeleteCategory(int categoryId)
    {
        await adminService.DeleteCategoryAsync(categoryId);
        categories = await adminService.GetAllCategoriesAsync();
        showConfirmDelete = false;
    }
    private void ConfirmDeleteCategory(int categoryId)
    {
        deleteCategoryId = categoryId;
        showConfirmDelete = true;
    }
    private void ShowAddCategoryForm()
    {
        newCategory = new CategoryModel();
        showAddForm = true;
    }

    //SEGMENT
    private async Task SubmitAddSegment()
    {
        await adminService.AddSegmentAsync(newSegment);
        segments = await adminService.GetAllSegmentsAsync();
        showAddSegmentForm = false;
    }
    private void ShowAddSegmentForm()
    {
        newSegment = new SegmentModel();
        showAddSegmentForm = true;
    }

    private async Task SubmitEditSegment()
    {
        await adminService.UpdateSegmentAsync(selectedSegment);
        segments = await adminService.GetAllSegmentsAsync();
        showEditSegmentForm = false;
    }
    private void EditSegment(SegmentModel segment)
    {
        selectedSegment = segment;
        showEditSegmentForm = true;
    }
    private void ConfirmDeleteSegment(int segmentId)
    {
        deleteSegmentId = segmentId;
        showConfirmDeleteSegment = true;
    }
    private async Task DeleteSegment(int segmentId)
    {
        await adminService.DeleteSegmentAsync(segmentId);
        segments = await adminService.GetAllSegmentsAsync();
        showConfirmDeleteSegment = false;
    }

    //SUBCATEGORY
    private async Task SubmitAddSubcategory()
    {
        await adminService.AddSubcategoryAsync(newSubcategory);
        subcategories = await adminService.GetAllSubcategoriesAsync();
        showAddSubcategoryForm = false;
    }
    private void ShowAddSubcategoryForm()
    {
        newSubcategory = new SubcategoryModel();
        showAddSubcategoryForm = true;
    }

    private async Task SubmitEditSubcategory()
    {
        await adminService.UpdateSubcategoryAsync(selectedSubcategory);
        subcategories = await adminService.GetAllSubcategoriesAsync();
        showEditSubcategoryForm = false;
    }
    private void EditSubcategory(SubcategoryModel subcategory)
    {
        selectedSubcategory = subcategory;
        showEditSubcategoryForm = true;
    }

    private async Task DeleteSubcategory(int subcategoryId)
    {
        await adminService.DeleteSubcategoryAsync(subcategoryId);
        subcategories = await adminService.GetAllSubcategoriesAsync();
        showConfirmDeleteSubcategory = false;
    }

    private void ConfirmDeleteSubcategory(int subcategoryId)
    {
        deleteSubcategoryId = subcategoryId;
        showConfirmDeleteSubcategory = true;
    }

    //QUESTIONS 
    private async Task SubmitAddQuestion()
    {
        await adminService.AddQuestionAsync(newQuestion);
        questions = await adminService.GetAllQuestionsAsync();
        // Assuming newQuestion.Id is now set, proceed to add answers
        if (newQuestion.Id != 0 && newQuestion.Answers.Any())
        {
            await SubmitAnswersForQuestion(newQuestion);
        }
        showAddQuestionForm = false;
    }

    private async Task SubmitAnswersForQuestion(QuestionModel question)
    {
        foreach (var answer in question.Answers)
        {
            if (string.IsNullOrEmpty(answer.Answer)) continue; // Skip empty answers

            answer.QuestionId = question.Id;
            await adminService.AddAnswerAsync(answer);
        }
    }
    private async Task SubmitEditQuestion()
    {
        await adminService.UpdateQuestionAsync(selectedQuestion);

        // Assuming you have a way to track new vs existing answers
        foreach (var answer in selectedQuestion.Answers)
        {
            if (answer.Id > 0) // If it's an existing answer, update it
            {
                await adminService.UpdateAnswerAsync(answer);
            }
            else // If it's a new answer, add it
            {
                answer.QuestionId = selectedQuestion.Id; // Link the answer to the question
                await adminService.AddAnswerAsync(answer);
            }
        }

        questions = await adminService.GetAllQuestionsAsync();
        showEditQuestionForm = false;
    }

    private async Task DeleteQuestion(int questionId)
    {
        await adminService.DeleteQuestionAsync(questionId);
        questions = await adminService.GetAllQuestionsAsync();
        showConfirmDeleteQuestion = false;
    }
    private void TriggerShowAddQuestionForm()
    {
        newQuestion = new QuestionModel();
        
        showAddQuestionForm = true;
    }
    private void EditQuestion(QuestionModel question)
    {
        selectedQuestion = question;
        showEditQuestionForm = true;
    }
    private void ConfirmDeleteQuestion(int questionId)
    {
        deleteQuestionId = questionId;
        showConfirmDeleteQuestion = true;
    }

    private void AddAnswerAsync()
    {
        var answerModel = new AnswerModel();
        newQuestion.Answers.Add(answerModel);
    }
}



