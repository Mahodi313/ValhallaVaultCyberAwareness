@page "/admin/categories"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwareness.DAL.Repository
@using ValhallaVaultCyberAwareness.DAL.Uow
@using ValhallaVaultCyberAwareness.DAL.DbModels
@inject IUow UnitOfWork
@attribute [Authorize]
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRepository<UserResponseModel> userRepo
@inject IRepository<CategoryModel> categoryRepo
@inject IRepository<SegmentModel> segmentModel
@inject IRepository<SubcategoryModel> subCategoryModel
@inject IRepository<QuestionModel> subCategoryModel
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<h3>Category Management</h3>

@if (categories == null)
{
    <p>Loading categories...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Category Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>
                        <button @onclick="() => ConfirmEditCategory(category)">Edit</button>
                        <button @onclick="() => ConfirmDeleteCategory(category.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="ShowAddCategoryForm">Add New Category</button>

    @if (showAddForm)
    {
        <EditForm Model="newCategory" OnValidSubmit="SubmitAddCategory">
            <InputText @bind-Value="newCategory.Name" />
            <button type="submit">Add Category</button>
        </EditForm>
    }

    @if (showEditForm)
    {
        <EditForm Model="selectedCategory" OnValidSubmit="SubmitEditCategory">
            <InputText @bind-Value="selectedCategory.Name" />
            <button type="submit">Update Category</button>
        </EditForm>
    }

    @if (showConfirmDelete)
    {
        <p>Are you sure you want to delete this category?</p>
        <button @onclick="() => DeleteCategory(deleteCategoryId)">Confirm Delete</button>
        <button @onclick="() => showConfirmDelete = false">Cancel</button>
    }
}
<h4>Segment Management</h4>
@if (segments == null)
{
    <p>Loading segments...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Segment Name</th>
                <th>Associated Category ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var segment in segments)
            {
                <tr>
                    <td>@segment.Name</td>
                    <td>@segment.CategoryId</td>
                    <td>
                        <button @onclick="() => EditSegment(segment)">Edit</button>
                        <button @onclick="() => ConfirmDeleteSegment(segment.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="ShowAddSegmentForm">Add New Segment</button>
}

@if (showAddSegmentForm)
{
    <EditForm Model="newSegment" OnValidSubmit="SubmitAddSegment">
        <InputText @bind-Value="newSegment.Name" />
        <InputNumber @bind-Value="newSegment.CategoryId" />
        <button type="submit">Add Segment</button>
    </EditForm>
}

@if (showEditSegmentForm)
{
    <EditForm Model="selectedSegment" OnValidSubmit="SubmitEditSegment">
        <InputText @bind-Value="selectedSegment.Name" />
        <InputNumber @bind-Value="selectedSegment.CategoryId" />
        <button type="submit">Update Segment</button>
    </EditForm>
}

@if (showConfirmDeleteSegment)
{
    <p>Are you sure you want to delete this segment?</p>
    <button @onclick="() => DeleteSegment(deleteSegmentId)">Confirm Delete</button>
    <button @onclick="() => showConfirmDeleteSegment = false">Cancel</button>
}

<h4>Subcategory Management</h4>
@if (subcategories == null)
{
    <p>Loading subcategories...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Subcategory Name</th>
                <th>Associated Segment ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var subcategory in subcategories)
            {
                <tr>
                    <td>@subcategory.Name</td>
                    <td>@subcategory.SegmentId</td>
                    <td>
                        <button @onclick="() => EditSubcategory(subcategory)">Edit</button>
                        <button @onclick="() => ConfirmDeleteSubcategory(subcategory.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="ShowAddSubcategoryForm">Add New Subcategory</button>
}

@if (showAddSubcategoryForm)
{
    <EditForm Model="newSubcategory" OnValidSubmit="SubmitAddSubcategory">
        <InputText @bind-Value="newSubcategory.Name" />
        <InputNumber @bind-Value="newSubcategory.SegmentId" />
        <button type="submit">Add Subcategory</button>
    </EditForm>
}

@if (showEditSubcategoryForm)
{
    <EditForm Model="selectedSubcategory" OnValidSubmit="SubmitEditSubcategory">
        <InputText @bind-Value="selectedSubcategory.Name" />
        <InputNumber @bind-Value="selectedSubcategory.SegmentId" />
        <button type="submit">Update Subcategory</button>
    </EditForm>
}

@if (showConfirmDeleteSubcategory)
{
    <p>Are you sure you want to delete this subcategory?</p>
    <button @onclick="() => DeleteSubcategory(deleteSubcategoryId)">Confirm Delete</button>
    <button @onclick="() => showConfirmDeleteSubcategory = false">Cancel</button>
}
<h4>Question Management</h4>
@if (questions == null)
{
    <p>Loading questions...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Question Title</th>
                <th>Associated Subcategory ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var question in questions)
            {
                <tr>
                    <td>@question.Title</td>
                    <td>@question.SubcategoryId</td>
                    <td>
                        <button @onclick="() => EditQuestion(question)">Edit</button>
                        <button @onclick="() => ConfirmDeleteQuestion(question.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="ShowAddQuestionForm">Add New Question</button>
}

@if (showAddQuestionForm)
{
    <EditForm Model="newQuestion" OnValidSubmit="SubmitAddQuestion">
        <InputText @bind-Value="newQuestion.Title" />
        <InputNumber @bind-Value="newQuestion.SubcategoryId" />
        <button type="submit">Add Question</button>
    </EditForm>
}

@if (showEditQuestionForm)
{
    <EditForm Model="selectedQuestion" OnValidSubmit="SubmitEditQuestion">
        <InputText @bind-Value="selectedQuestion.Title" />
        <InputNumber @bind-Value="selectedQuestion.SubcategoryId" />
        <button type="submit">Update Question</button>
    </EditForm>
}

@if (showConfirmDeleteQuestion)
{
    <p>Are you sure you want to delete this question?</p>
    <button @onclick="() => DeleteQuestion(deleteQuestionId)">Confirm Delete</button>
    <button @onclick="() => showConfirmDeleteQuestion = false">Cancel</button>
}

@code {
    private List<CategoryModel> categories;
    private CategoryModel newCategory = new CategoryModel();
    private CategoryModel selectedCategory = new CategoryModel();
    private bool showAddForm = false;
    private bool showEditForm = false;
    private bool showConfirmDelete = false;
    private int deleteCategoryId;
    // Segment Variables
    private List<SegmentModel> segments;
    private SegmentModel newSegment = new SegmentModel();
    private SegmentModel selectedSegment = new SegmentModel();
    private bool showAddSegmentForm = false;
    private bool showEditSegmentForm = false;
    private bool showConfirmDeleteSegment = false;
    private int deleteSegmentId;
    // ...

    // Subsegment Variables
    private List<SubcategoryModel> subcategories;
    private SubcategoryModel newSubcategory = new SubcategoryModel();
    private SubcategoryModel selectedSubcategory = new SubcategoryModel();
    private bool showAddSubcategoryForm = false;
    private bool showEditSubcategoryForm = false;
    private bool showConfirmDeleteSubcategory = false;
    private int deleteSubcategoryId;
    // ...

    // Question Variables
    private List<QuestionModel> questions;
    private QuestionModel newQuestion = new QuestionModel();
    private QuestionModel selectedQuestion = new QuestionModel();
    private bool showAddQuestionForm = false;
    private bool showEditQuestionForm = false;
    private bool showConfirmDeleteQuestion = false;
    private int deleteQuestionId;
    // ...


    // For Caterory
    protected override async Task OnInitializedAsync()
    {
        categories = await UnitOfWork.CategoryRepo.GetAllAsync();
        segments = await UnitOfWork.SegmentRepo.GetAllAsync();
        subcategories = await UnitOfWork.SubcategoryRepo.GetAllAsync(); 
        questions = await UnitOfWork.QuestionRepo.GetAllAsync(); 
    }
   


    private void ConfirmEditCategory(CategoryModel category)
    {
        selectedCategory = category;
        showEditForm = true;
    }

    private void ConfirmDeleteCategory(int categoryId)
    {
        deleteCategoryId = categoryId;
        showConfirmDelete = true;
    }

    private async Task SubmitEditCategory()
    {
        await UnitOfWork.CategoryRepo.UpdateAsync(selectedCategory);
        await UnitOfWork.SaveChanges();
        showEditForm = false;
        categories = await UnitOfWork.CategoryRepo.GetAllAsync();
    }

    private async Task DeleteCategory(int categoryId)
    {
        await UnitOfWork.CategoryRepo.DeleteAsync(categoryId);
        await UnitOfWork.SaveChanges();
        showConfirmDelete = false;
        categories = await UnitOfWork.CategoryRepo.GetAllAsync();
    }

    private void ShowAddCategoryForm()
    {
        newCategory = new CategoryModel();
        showAddForm = true;
    }

    private async Task SubmitAddCategory()
    {
        await UnitOfWork.CategoryRepo.CreateAsync(newCategory);
        await UnitOfWork.SaveChanges();
        showAddForm = false;
        categories = await UnitOfWork.CategoryRepo.GetAllAsync();
    }

    //For Segment
  

    // Load segments data, similar to categories
    // ...

    private void EditSegment(SegmentModel segment)
    {
        selectedSegment = segment;
        showEditSegmentForm = true;
    }

    private async Task SubmitEditSegment()
    {
        await UnitOfWork.SegmentRepo.UpdateAsync(selectedSegment);
        await UnitOfWork.SaveChanges();
        showEditSegmentForm = false;
        segments = await UnitOfWork.SegmentRepo.GetAllAsync();
    }

    private void ConfirmDeleteSegment(int segmentId)
    {
        deleteSegmentId = segmentId;
        showConfirmDeleteSegment = true;
    }

    private async Task DeleteSegment(int segmentId)
    {
        await UnitOfWork.SegmentRepo.DeleteAsync(segmentId);
        await UnitOfWork.SaveChanges();
        showConfirmDeleteSegment = false;
        segments = await UnitOfWork.SegmentRepo.GetAllAsync();
    }

    private void ShowAddSegmentForm()
    {
        newSegment = new SegmentModel();
        showAddSegmentForm = true;
    }

    private async Task SubmitAddSegment()
    {
        await UnitOfWork.SegmentRepo.CreateAsync(newSegment);
        await UnitOfWork.SaveChanges();
        showAddSegmentForm = false;
        segments = await UnitOfWork.SegmentRepo.GetAllAsync();
    }

    //For SubSegment
    // Existing methods for Categories and Segments

    // Subcategory Methods
 

    private void EditSubcategory(SubcategoryModel subcategory)
    {
        selectedSubcategory = subcategory;
        showEditSubcategoryForm = true;
    }

    private async Task SubmitEditSubcategory()
    {
        await UnitOfWork.SubcategoryRepo.UpdateAsync(selectedSubcategory);
        await UnitOfWork.SaveChanges();
        showEditSubcategoryForm = false;
        subcategories = await UnitOfWork.SubcategoryRepo.GetAllAsync();
    }

    private void ConfirmDeleteSubcategory(int subcategoryId)
    {
        deleteSubcategoryId = subcategoryId;
        showConfirmDeleteSubcategory = true;
    }

    private async Task DeleteSubcategory(int subcategoryId)
    {
        await UnitOfWork.SubcategoryRepo.DeleteAsync(subcategoryId);
        await UnitOfWork.SaveChanges();
        showConfirmDeleteSubcategory = false;
        subcategories = await UnitOfWork.SubcategoryRepo.GetAllAsync();
    }

    private void ShowAddSubcategoryForm()
    {
        newSubcategory = new SubcategoryModel();
        showAddSubcategoryForm = true;
    }
    private async Task SubmitAddSubcategory()
    {
        await UnitOfWork.SubcategoryRepo.CreateAsync(newSubcategory);
        await UnitOfWork.SaveChanges();
        showAddSubcategoryForm = false;
        subcategories = await UnitOfWork.SubcategoryRepo.GetAllAsync();
    }
    // For questionmodel
    private void EditQuestion(QuestionModel question)
    {
        selectedQuestion = question;
        showEditQuestionForm = true;
    }

    private async Task SubmitEditQuestion()
    {
        await UnitOfWork.QuestionRepo.UpdateAsync(selectedQuestion);
        await UnitOfWork.SaveChanges();
        showEditQuestionForm = false;
        questions = await UnitOfWork.QuestionRepo.GetAllAsync();
    }

    private void ConfirmDeleteQuestion(int questionId)
    {
        deleteQuestionId = questionId;
        showConfirmDeleteQuestion = true;
    }

    private async Task DeleteQuestion(int questionId)
    {
        await UnitOfWork.QuestionRepo.DeleteAsync(questionId);
        await UnitOfWork.SaveChanges();
        showConfirmDeleteQuestion = false;
        questions = await UnitOfWork.QuestionRepo.GetAllAsync();
    }

    private void ShowAddQuestionForm()
    {
        newQuestion = new QuestionModel();
        showAddQuestionForm = true;
    }

    private async Task SubmitAddQuestion()
    {
        await UnitOfWork.QuestionRepo.CreateAsync(newQuestion);
        await UnitOfWork.SaveChanges();
        showAddQuestionForm = false;
        questions = await UnitOfWork.QuestionRepo.GetAllAsync();
    }
}

}