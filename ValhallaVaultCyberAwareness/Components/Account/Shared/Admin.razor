@page "/admin/categories"
@using ValhallaVaultCyberAwareness.DAL.Uow
@using ValhallaVaultCyberAwareness.DAL.DbModels
@inject IUow UnitOfWork

<h3>Category Management</h3>

@if (categories == null)
{
    <p>Loading categories...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Category Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>
                        <button @onclick="() => EditCategory(category)">Edit</button>
                        <button @onclick="() => DeleteCategory(category.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="ShowAddCategoryForm">Add New Category</button>

    @if (showEditForm)
    {
        <EditForm Model="selectedCategory" OnValidSubmit="SubmitEditCategory">
            <InputText @bind-Value="selectedCategory.Name" />
            <button type="submit">Update Category</button>
        </EditForm>
    }
}

@code {
    private List<CategoryModel> categories;
    private CategoryModel selectedCategory = new CategoryModel();
    private bool showEditForm = false;

    protected override async Task OnInitializedAsync()
    {
        categories = await UnitOfWork.CategoryRepo.GetAllAsync();
    }

    private void EditCategory(CategoryModel category)
    {
        selectedCategory = category;
        showEditForm = true;
    }

    private async Task SubmitEditCategory()
    {
        await UnitOfWork.CategoryRepo.UpdateAsync(selectedCategory);
        await UnitOfWork.SaveChanges();
        showEditForm = false;
        // Refresh category list
        categories = await UnitOfWork.CategoryRepo.GetAllAsync();
    }

    private async Task DeleteCategory(int categoryId)
    {
        await UnitOfWork.CategoryRepo.DeleteAsync(categoryId);
        await UnitOfWork.SaveChanges();
        // Refresh category list
        categories = await UnitOfWork.CategoryRepo.GetAllAsync();
    }

    private void ShowAddCategoryForm()
    {
        selectedCategory = new CategoryModel();
        showEditForm = true;
    }

    // Add methods for handling add category
    // Note: You can add a similar form and methods for adding a new category
}
